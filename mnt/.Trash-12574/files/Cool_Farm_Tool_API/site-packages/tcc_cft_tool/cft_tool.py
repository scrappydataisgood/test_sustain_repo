##
#   Wrapper object of GHG calculation using CFT API
#   Author: Yafan Tang
from copy import deepcopy
import pandas as pd
import re
from typing import Union
import warnings

import tcc_cft_tool.transform_utils as tu
import tcc_cft_tool.cft_api_utils as capi
import tcc_cft_tool.cft_config as cfg
from tcc_cft_tool.cft_excel import CftExcel


class CftTool(object):
    """
    Class wrapper for building CFT requests from raw input,
    calling CFT api, and parsing output returned.

    """

    def __init__(
            self,
            input_data: Union[list, pd.DataFrame],
            app_key: str,
            cft_major_version: int = 0,
            ignore_layer: list = None,
    ):
        """
        Class init method
        Parameters
        ----------
        input_data: pandas.DataFrame | list
        app_key: str
            app_key for access to CFT API
        ignore_layer: list
            optionally ignore data layer
        Return
        ----------
        """
        self._app_key = app_key
        self._api_config = cfg.CFT_VERSION_CONFIG[cft_major_version]
        self._api_result = None
        self._is_validated = False
        if isinstance(input_data, pd.DataFrame):
            self._input_format = "csv"
            print("Data quality checking and fixing...")
            df = tu.dq_control(deepcopy(input_data))
            print("Transforming input data into CFT API requests...")
            self._api_request = tu.input_to_request(df).to_dict("records")
        elif isinstance(input_data, pd.io.excel._base.ExcelFile):
            self._input_format = "excel"
            cft_input = CftExcel(deepcopy(input_data))
            self._api_request = cft_input.covert_excel_to_request()
        else:
            self._input_format = "json"
            assert set(pd.DataFrame(input_data).columns) == {"AssessmentID", "request"}
            self._api_request = deepcopy(input_data)
        if ignore_layer:
            self.assign_source_empty_ls(ignore_layer)

    def assign_source_empty_ls(self, ignore_layer):
        """
        force ignored input source to be empty list
        """
        ignore_layer_dict = {x: [] for x in ignore_layer}
        for field in self._api_request:
            field["request"].update(ignore_layer_dict)

    def validate_request(self):
        """
        Validate api request with sample json schema

        """
        print("Validating schema of CFT API requests...")
        api = capi.CftAPI(self._app_key, self._api_config['endpoint_url'], self._api_config['schema_path'])
        n_error = 0
        for request_dict in self._api_request:
            is_valid, error_string = api.validate_crop_product_calculate_payload(
                request_dict["request"]
            )
            # prune error string, and just keep the valuable part
            if isinstance(error_string, str):
                error_split_str = re.split("\n|:", error_string)
                error_string = error_split_str[0] + error_split_str[2]
            request_dict.update(
                {"validate_status": is_valid, "validate_error": error_string}
            )
            if not is_valid:
                n_error += 1
        if n_error > 0:
            warnings.warn(f"There are {n_error} invalid request")
        self._is_validated = True

    def call_api(self, api_batch: int = 50):
        """
        wrapper function of call cft GHG calculation api
        """

        def _call_api(df):
            """
            local function to call cft api
            Parameters
            ----------
            df: pandas.DataFrame
            api_batch: int
                how many fields per api call
                value: 0-50
            Return
            ----------
            df: pandas.DataFrame

            """
            if all(df["validate_status"]):
                num_field = len(df["request"])
                df.loc[:, "return"] = api.crop_product_calculate(list(df["request"]))[:num_field]
            else:
                df.loc[:, "return"] = None
            return df

        if not self._is_validated:
            print("API requests have not been validated yet...")
            self.validate_request()
        print("Calling CFT API ...")
        api = capi.CftAPI(self._app_key, self._api_config['endpoint_url'], self._api_config['schema_path'])
        api_df = pd.DataFrame(self._api_request)
        api_df = api_df.sort_values(
            by=["validate_status"], ascending=False
        ).reset_index(drop=True)
        api_df["group"] = api_df.index // api_batch
        result_df = (
            api_df.groupby(["validate_status", "group"])
                .apply(_call_api)
                .drop(columns="group")
        )
        print("Calculation result acquired!")
        n_error = result_df['return'].astype(str).str.contains('error').sum()
        if n_error > 0:
            warnings.warn(f"There are {n_error} requests having error")
        self._api_result = result_df.to_dict("records")

    def parse_summary(self) -> pd.DataFrame:
        """
        Parse `summary` part of CFT api returns

        Return
        ----------
        : pandas.DataFrame
          Summary result in a df
        """
        if not self._api_result:
            print("CFT API returns not found...")
            self.call_api()
        result_df = tu.parse_summary(self._api_result)
        if self._input_format == "excel":
            return tu.parse_assessmentid(result_df)
        else:
            return result_df

    def parse_detail(self) -> pd.DataFrame:
        """
        Parse CFT api return in more detail regarding different
        emission sources and green house gas.

        Return
        ----------
        : pandas.DataFrame
          More detail of GHG result in a df
        """
        if not self._api_result:
            print("CFT API returns not found...")
            self.call_api()
        result_df = tu.parse_detail(self._api_result)
        if self._input_format == "excel":
            return tu.parse_assessmentid(result_df)
        else:
            return result_df

    @property
    def validation_result(self) -> pd.DataFrame:
        """
        Return validated api requests in format of df

        Return
        ----------
        : pandas.DataFrame
        """
        if not self._is_validated:
            print("API requests have not been validated yet!")
            self.validate_request()
        return pd.DataFrame(self._api_request)

    @property
    def api_result(self) -> pd.DataFrame:
        """
        Return api request and return in format of df

        Return
        ----------
        : pandas.DataFrame
        """
        if not self._api_result:
            print("CFT API returns not found...")
            self.call_api()
        return pd.DataFrame(self._api_result)
