import pandas as pd
import tcc_cft_tool.cft_config as cft_config

def remap_encoding_dict(enconding_dict, key_name):
    return {value[key_name]: key for key, value in enconding_dict.items()}


def encode_climate(name):
    return remap_encoding_dict(cft_config.CLIMATE, "description").get(name)


def get_default_temp(climate):
    return {value['description']: value['average_temp_c'] for key, value in cft_config.CLIMATE.items()}.get(climate)


def encode_crop_type(name):
    return remap_encoding_dict(cft_config.CROP_TYPE, "name").get(name)


def encode_residue_management(name):
    return remap_encoding_dict(cft_config.RESIDUE_MANAGEMENT_TYPE, "name").get(name)


def encode_soil_texture(description):
    return remap_encoding_dict(cft_config.SOIL_TEXTURE, "description").get(description)


def encode_soil_drainage(name):
    return remap_encoding_dict(cft_config.SOIL_DRAINAGE, "name").get(name)


def encode_soil_ph(ph):
    """
    Map a continuous pH value to a Cool Farms API category name.  Throws
    an exception for invalid

    Parameters
    ----------
    pH: float
        Soil acidity

    Returns
    int
        Returns an API defined id
    """

    if ph <= 5.5:
        name = "lte_55"
    elif 5.5 < ph and ph <= 7.3:
        name = "btw_55_73"
    elif 7.3 < ph and ph <= 8.5:
        name = "btw_73_85"
    elif 8.5 < ph and ph <= 14:
        name = "gt_85"
    else:
        name = 'error'
    return remap_encoding_dict(cft_config.SOIL_PH, "name").get(name)


def encode_soil_moisture(name):
    return remap_encoding_dict(cft_config.SOIL_MOISTURE, "name").get(name)


def encode_pesticide_category(description):
    return remap_encoding_dict(cft_config.PESTICIDE_CATEGORY, "description").get(description)

def encode_pesticide_type(description):
    return remap_encoding_dict(cft_config.PESTICIDE_TYPE, "description").get(description)


def encode_irrigation_method(description):
    return remap_encoding_dict(cft_config.IRRIGATION_METHOD, "description").get(description)


def encode_general_unit(name):
    return remap_encoding_dict(cft_config.UNIT, "full_name").get(name)


def encode_fertilizer_inhibition(name):
    return remap_encoding_dict(cft_config.FERTILIZER_INHIBITION, "description").get(
        name
    )


def encode_fertilizer_method(name):
    return remap_encoding_dict(cft_config.FERTILIZER_METHOD, "description").get(name)


def encode_fertilizer_type(name):
    return remap_encoding_dict(cft_config.FERTILIZER_TYPE, "name").get(name)


def encode_fertilizer_production(name):
    return remap_encoding_dict(cft_config.FERTILIZER_PRODUCTION, 'name').get(name)


def encode_machinery_type(name):
    return remap_encoding_dict(cft_config.MACHINERY_TYPE, "name").get(name)


def encode_direct_energy_type(name):
    return remap_encoding_dict(cft_config.DIRECT_ENERGY_TYPE, "name").get(name)


def encode_irrigation_power_source(name):
    return remap_encoding_dict(cft_config.IRRIGATION_POWER_SOURCE, "description").get(name)


def encode_processing_type(name):
    return remap_encoding_dict(cft_config.PROCESSING_TYPE, "name").get(name)

def encode_transport_mode(name):
    return remap_encoding_dict(cft_config.TRANSPORT_MODE, "name").get(name)

def encode_energy_category(name):
    return remap_encoding_dict(cft_config.ENERGY_CATEGORY, "Description").get(name)

def encode_land_management(name):
    return dict(
        (v, k)
        for k, v in pd.DataFrame(cft_config.MANAGEMENT_PRACTICE_CHANGE)
        .T.drop("category", axis=1)
        .apply(lambda row: "_".join(row.values.astype(str)), axis=1)
        #.apply(clean_str)
        .to_dict()
        .items()
    ).get(name)

def clean_str(ob):
    if (type(ob) == str):
         ob = " ".join(ob.split())
         if (ob.replace(' ','')==''):
             return None
    return ob
