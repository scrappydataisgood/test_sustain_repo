# # Utils functions of calling Cool Farm Tool api Origin code:
# https://gitlab.tcc.li/climate/science/data-insights-discovery/sustainability/feature_store/-/tree/master/cft_utils
# Author: Yafan

import json
from jsonschema import ValidationError, validate
import pkgutil
import requests


class CftAPI(object):
    """
    Utility functions and class wrapper for building CFT requests

    For general information on API calls, see:
    https://app.coolfarmtool.org/docs/api/v1/retrieving.html

    For general information on calculation API calls, see:
    https://app.coolfarmtool.org/docs/api/v1/calculating.html
    """

    def __init__(
        self,
        app_key: str,
        api_url: str,
        schema_path: str,
        logger=None,
    ):
        """
        Class init method

        Parameters
        ----------
        self: object
        api_url:str
            Base API URL
        app_key:str
            Application key (defaults to CFT_APP_KEY environment value)
        calculate_schema:str
            Path to the crop product calculate API JSON schema
        logger: object, optional
            An optional logger object for logging messages
        """
        self._api_url = api_url
        self._app_key = app_key
        self._cft_schema = json.loads(pkgutil.get_data(__name__, schema_path).decode())
        if logger:
            self._info = logger.info
            self._warning = logger.warning
            self._error = logger.error
            self._critical = logger.critical
        else:
            self._info = lambda m, *args: print(m, *args)
            self._warning = lambda m, *args: print(m, *args)
            self._error = lambda m, *args: print(m, *args)
            self._critical = lambda m, *args: print(m, *args)

    def _call_endpoint(
        self, endpoint_url, payload=None, params=None, verbose=False
    ):
        """
        Call the specified endpoint (endpoint_url) using the supplied method
        with payload directed to the data or json argument for POST requests.

        Parameters
        ----------
        endpoint_url: str
            Fully qualified URL for endpoint
        payload: object, optional
            Python dictionary (will be converted to JSON) or other JSON serializable object (e.g. JSON string)
            for use with POST method, optional
        params: dict, optional
            Python dictionary describing request parameters, optional
        verbose: bool
            Print status information

        Returns
        -------
        dict
            A dictionary of result values or errors
        """

        if isinstance(payload, bytes):
            # Assumed to be valid JSON ready to send to endpoint
            r = requests.post(
                endpoint_url,
                headers={
                    "x-api-app-authorization": self._app_key,
                    "x-requested-with": "XMLHttpRequest",
                },
                data=payload,
                params=params,
            )
        else:
            # Handle string as a special case
            if isinstance(payload, str):
                payload = json.loads(payload)

            r = requests.post(
                endpoint_url,
                headers={
                    "x-api-app-authorization": self._app_key,
                    "x-requested-with": "XMLHttpRequest",
                },
                json=payload,
                params=params,
                # TODO: Find a better way to handle `requests.exceptions.SSLError:` in test
            )

        if verbose:
            print("URL:", endpoint_url)
            print("Status:", r.status_code)
            print("Reason:", r.reason)

        try:
            result_dict = json.loads(r.content)
        except ValueError:
            self._error("Non-JSON compliant content returned:", r.content)
            result_dict = None

        if not r.ok:
            self._error(f"URL: {endpoint_url}")
            self._error(f"Status: {r.status_code}")
            self._error(f"Reason: {r.reason}")
            if result_dict is not None:
                self._error(f"Result: {result_dict}")
            r.raise_for_status()

        return result_dict

    # Calculation API calls

    def crop_product_calculate(self, payload, verbose=False):
        """
        Call the crop_product/calculate endpoint with given payload

        See: https://app.coolfarmtool.org/docs/api/v1/calculating.html#post--crop_product-calculate-
        for specific information on the crop_product-calculate endpoint

        For general information on calculation API calls, see:
        https://app.coolfarmtool.org/docs/api/v1/calculating.html

        Parameters
        ----------
        payload: object
            Python dictionary (will be converted to JSON), or JSON serializable object
            (e.g. a string containing JSON)
        verbose: bool, optional
            Print status information (default: False)

        Returns
        -------
        dict
            A dictionary of result values or errors
        """
        return self._call_endpoint(
            endpoint_url=self._api_url + "crop_product/calculate/",
            payload=payload,
            verbose=verbose,
        )

    def validate_crop_product_calculate_payload(self, payload, verbose=False):
        """
        Use the JSON schema to validate payload parameters, and returns True if no errors are found,
        or False along with the detected error as a string, otherwise.  Optionally can
        print details on the validation error (for interactive use).

        JSON schema source: https://app.coolfarmtool.org/docs/_downloads/crop_product-calculate-input1.json

        Parameters
        ----------
        payload: object
            Python dictionary (will be converted to JSON) or other JSON serializable object
            (e.g. a string containing JSON)
        verbose: bool, optional
            Print status information (default: False)

        Returns
        -------
        bool, str
            True if payload is a valid according to the JSON schema; and
            the string representation of any validation error if payload
            is invalid
        """

        try:
            validate(instance=payload, schema=self._cft_schema)
            result = True, None
        except ValidationError as ve:
            if verbose:
                print("Invalid payload", str(ve))
            result = False, str(ve)

        return result
